{"version":3,"sources":["services/notes.js","components/Note.jsx","components/Notification.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","returnedNote","catch","error","setTimeout","n","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","type","value","onChange","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99f21ba9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseUrl = '/api/notes';\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n    return request.then(response => response.data);\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getAll, create, update };","const Note = ({note, toggleImportance}) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important';\r\n\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Note;","const Notification = ({message}) => {\r\n    if (!message) return null;\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;","const Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import {useState, useEffect} from 'react';\nimport noteService from './services/notes';\nimport Note from './components/Note';\nimport './App.css';\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n    const [notes, setNotes] = useState([]);\n    const [newNote, setNewNote] = useState('');\n    const [showAll, setShowAll] = useState(true);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        noteService.getAll()\n            .then(initialNotes => setNotes(initialNotes))\n    }, []);\n\n    const addNote = e => {\n        e.preventDefault();\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n        };\n\n        noteService.create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote));\n                setNewNote('');\n            })\n    };\n\n    const handleNoteChange = e => {\n        setNewNote(e.target.value);\n    };\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important);\n\n    const toggleImportanceOf = id => {\n        const note = notes.find(note => note.id === id);\n        const changedNote = {...note, important: !note.important};\n\n        noteService.update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n            })\n            .catch(error => {\n                setErrorMessage(`Note '${note.content}' was already removed from server`);\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            });\n    };\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage}/>\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important': 'all'}\n                </button>\n            </div>\n            <ul>\n                {\n                    notesToShow.map(note => (\n                        <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n                    ))\n                }\n            </ul>\n            <form onSubmit={addNote}>\n                <input type=\"text\" value={newNote} onChange={handleNoteChange}/>\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}